% Auto-generated by cameraCalibrator app on 01-Oct-2023
%-------------------------------------------------------

% Requires MATLAB root file to be src
% Define images to process
imageFileNames = {'../camera_calibration/Image166.png',...
    '../camera_calibration/Image167.png',...
    '../camera_calibration/Image168.png',...
    '../camera_calibration/Image169.png',...
    '../camera_calibration/Image170.png',...
    '../camera_calibration/Image174.png',...
    '../camera_calibration/Image176.png',...
    '../camera_calibration/Image179.png',...
    '../camera_calibration/Image181.png',...
    '../camera_calibration/Image183.png',...
    '../camera_calibration/Image190.png',...
    '../camera_calibration/Image193.png',...
    '../camera_calibration/Image196.png',...
    '../camera_calibration/Image197.png',...
    '../camera_calibration/Image198.png',...
    '../camera_calibration/Image200.png',...
    '../camera_calibration/Image201.png',...
    '../camera_calibration/Image202.png',...
    '../camera_calibration/Image203.png',...
    '../camera_calibration/Image205.png',...
    '../camera_calibration/Image209.png',...
    '../camera_calibration/Image210.png',...
    };
% Detect calibration pattern in images
detector = vision.calibration.monocular.CheckerboardDetector();
[imagePoints, imagesUsed] = detectPatternPoints(detector, imageFileNames, 'HighDistortion', true);
imageFileNames = imageFileNames(imagesUsed);

% Read the first image to obtain image size
originalImage = imread(imageFileNames{1});
[mrows, ncols, ~] = size(originalImage);

% Generate world coordinates for the planar pattern keypoints
squareSize = 25;  % in units of 'millimeters'
worldPoints = generateWorldPoints(detector, 'SquareSize', squareSize);

% Calibrate the camera using fisheye parameters
[cameraParams, imagesUsed, estimationErrors] = estimateFisheyeParameters(imagePoints, worldPoints, ...
    [mrows, ncols], ...
    'EstimateAlignment', false, ...
    'WorldUnits', 'millimeters');

% % View reprojection errors
% h1=figure; showReprojectionErrors(cameraParams);
% 
% % Visualize pattern locations
% h2=figure; showExtrinsics(cameraParams, 'CameraCentric');

% Display parameter estimation errors
displayErrors(estimationErrors, cameraParams);

% For example, you can use the calibration data to remove effects of lens distortion.
undistortedImage = undistortFisheyeImage(originalImage, cameraParams.Intrinsics);

% See additional examples of how to use the calibration data.  At the prompt type:
% showdemo('MeasuringPlanarObjectsExample')
% showdemo('StructureFromMotionExample')
